<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="tag:textalign.net,2015:ns" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:local="tag:textalign.net,2015:ns" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <include href="incl/TAN-class-2.rng">
    <start>
      <element name="TAN-A">
        <a:documentation>specifies that the file is a div-based TAN alignment file. Root element.</a:documentation>
        <ref name="TAN-root"/>
      </element>
    </start>
    <define name="source-list">
      <a:documentation>TAN-A files must have zero or more sources</a:documentation>
      <zeroOrMore>
        <ref name="link-element-source"/>
      </zeroOrMore>
    </define>
    <define name="voc-element-non-class-2">
      <ref name="voc-element-tan-a"/>
    </define>
    <define name="tok-cert-opt">
      <empty/>
    </define>
    <define name="body-content-non-class-2">
      <a:documentation>Redefining TAN-body-core not only defines what is in the body of a TAN-A but also excludes groups from it.</a:documentation>
      <optional>
        <ref name="ptr-attr-subject"/>
      </optional>
      <optional>
        <ref name="ptr-attr-object"/>
      </optional>
      <optional>
        <ref name="ptr-attr-verb"/>
      </optional>
      <zeroOrMore>
        <ref name="element-claim"/>
      </zeroOrMore>
    </define>
  </include>
  <!-- ATTRIBUTES -->
  <define name="attr-in-lang">
    <attribute name="in-lang">
      <a:documentation>restricts a claim to a particular language; used with only certain verbs, e.g., "translates"</a:documentation>
      <a:documentation>By default, this feature is disallowed. A verb's &lt;constraint&gt; must explicitly require or allow it.</a:documentation>
      <data type="language"/>
    </attribute>
  </define>
  <define name="ptr-attr-modal">
    <attribute name="adverb">
      <a:documentation>names a &lt;modal&gt; that qualifies the claim.</a:documentation>
      <a:documentation> Multiple values of @adverb are interpreted to mean "and" with intersection. No distribution takes place (e.g., adverb="x y" means "[subject] x &amp; y [verby]...", not "[subject] x [verb]..." and "[subject] y [verb]...").</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-object">
    <attribute name="object">
      <a:documentation>takes one or more ID refs of entities defined in &lt;head&gt; that serve as the grammatical object of a claim. For example, if you wish to say that work A is a commentary on work B, then @object would have the ID ref for work B. @object is used for idrefs; data content, textual references, or complex objects must be encoded with &lt;object&gt;.</a:documentation>
      <a:documentation> Multiple values of @object are interpreted to mean "and", resulting in distribution of the claim (e.g., object="x y" becomes "[subject] [verb] x" and "[subject] [verb] y...").</a:documentation>
      <a:documentation>In RDF, the concept of object (the third element of a triple) is required. In TAN-c, it is not required, since some &lt;verb&gt;s may be intransitive (e.g., "Charlie slept.").</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-place">
    <attribute name="where">
      <a:documentation>restricts the &lt;claim&gt; to a specific &lt;place&gt;.
 Multiple values of @where are interpreted to mean "or" with union. No distribution takes place (e.g., where="x y" means "[subject] x or y [verby]...", not "[subject] x [verb]..." and "[subject] y [verb]...").</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-scriptum">
    <attribute name="scriptum">
      <a:documentation>points to one or more ID refs of entities defined in &lt;head&gt; that are scripta (text-bearing objects).</a:documentation>
      <a:documentation> Multiple values of @scriptum are interpreted to mean "and", resulting in distribution of the claim.</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-subject">
    <attribute name="subject">
      <a:documentation>points to one or more ID refs of entities defined in &lt;head&gt; that serve as the grammatical subject of a claim. @subject within &lt;body&gt; indicates the default subject(s) for &lt;claim&gt;s. @subject is used for idrefs; data content, textual references, or complex objects must be encoded with &lt;subject&gt;.</a:documentation>
      <a:documentation> Multiple values of @subject are interpreted to mean "and", resulting in distribution of the claim (e.g., subject="x y" becomes "x [verby]..." and "y [verb]...").</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-units">
    <attribute name="units">
      <a:documentation>points to the ID ref of a &lt;unit&gt;, defining the type of units.</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-verb">
    <attribute name="verb">
      <a:documentation>points to one or more &lt;verb&gt;s that serve to assert something of the @subject.</a:documentation>
      <a:documentation>The preferred term "verb" is equivalent to RDF "predicate." The latter term is avoided as being misleading -- most who use TAN will understand "predicate," grammatically speaking, to refer to everything in a sentence that is not the subject.</a:documentation>
      <a:documentation> Multiple values of @verb are interpreted to mean "and", resulting in distribution of the claim (e.g., verb="x y" becomes "[subject] x ..." and "[subject] y...").</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-version">
    <attribute name="version">
      <a:documentation>points to one or more versions of a scriptum referred to by a &lt;subject&gt; or &lt;objec&gt;.</a:documentation>
    </attribute>
  </define>
  <define name="ptr-attr-work">
    <attribute name="work">
      <a:documentation>refers to a work by means of a source ID as a proxy. The attribute will be treated as indicating all sources that share the same work as the one mentioned.</a:documentation>
      <a:documentation>If you wish to avoid making a claim applying to all other versions of a work, use @src instead.</a:documentation>
    </attribute>
  </define>
  <!-- ELEMENTS -->
  <define name="element-claim">
    <element name="claim">
      <a:documentation>makes one or more claims.</a:documentation>
      <choice>
        <ref name="inclusion"/>
        <group>
          <optional>
            <ref name="ed-stamp"/>
          </optional>
          <optional>
            <ref name="attr-id-xml"/>
          </optional>
          <optional>
            <ref name="certainty-claim"/>
          </optional>
          <optional>
            <ref name="claimant-attributes"/>
          </optional>
          <optional>
            <ref name="ptr-attr-period"/>
          </optional>
          <optional>
            <ref name="ptr-attr-modal"/>
          </optional>
          <optional>
            <ref name="ptr-attr-verb"/>
          </optional>
          <optional>
            <ref name="ptr-attr-place"/>
          </optional>
          <interleave>
            <optional>
              <ref name="subject"/>
            </optional>
            <optional>
              <ref name="object"/>
            </optional>
            <zeroOrMore>
              <ref name="element-at-ref"/>
            </zeroOrMore>
            <optional>
              <ref name="in-lang"/>
            </optional>
          </interleave>
        </group>
      </choice>
    </element>
  </define>
  <define name="element-at-ref">
    <element name="at-ref">
      <a:documentation>restricts a claim to a particular abstract textual reference. </a:documentation>
      <a:documentation>&lt;at-ref&gt; serves mainly claims related to apparatus critici. In traditional critical editions, the main text has an apparatus at the bottom of the page, indicating variations in the manuscript, e.g., "A om." or "A: γάρ". These terse statements can be expanded: "Manuscript A omits the passage at line X word Y" and "Manuscript A reads γάρ in place of the passage at line X word Y." In those statements, A is the subject, and the reading (or lack thereof) is the object. The qualifier "at line X word Y" is the phrase that corresponds to &lt;at-ref&gt;. It functions much like &lt;where&gt;, but the geography is textual rather than spatial. </a:documentation>
      <a:documentation>This qualifier is special, and must be explicitly allowed or mandated by the &lt;verb&gt;'s definition. </a:documentation>
      <a:documentation>&lt;at-ref&gt; contains a textual reference, and will look similar to a textual reference &lt;subject&gt; or &lt;object&gt;. </a:documentation>
      <optional>
        <ref name="ed-stamp"/>
      </optional>
      <ref name="textual-reference"/>
    </element>
  </define>
  <define name="element-div">
    <element name="div">
      <a:documentation>restricts a claim to a particular passage in a subject or object. It is especially useful for clarifying which part of a scriptum is meant, e.g., page ranges, in a particular scriptum.</a:documentation>
      <a:documentation>Unlike class-1 &lt;div&gt;s, this one takes no text and no inclusions.</a:documentation>
      <optional>
        <ref name="ed-stamp"/>
      </optional>
      <ref name="ptr-attr-type"/>
      <ref name="attr-n"/>
      <zeroOrMore>
        <ref name="element-div"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="element-in-lang">
    <element name="in-lang">
      <a:documentation>restricts a claim to a particular language; used with only certain verbs, e.g., "translates"</a:documentation>
      <a:documentation>By default, this feature is disallowed. A verb's &lt;constrain&gt; must explicitly require or allow it.</a:documentation>
      <optional>
        <ref name="ed-stamp"/>
      </optional>
      <data type="language"/>
    </element>
  </define>
  <define name="element-object">
    <element name="object">
      <a:documentation>points to text references that act as the object of the claim.</a:documentation>
      <a:documentation>Unlike @object, which points to any entity via idrefs, &lt;subject&gt; is intended exclusively to point to data content or a textual subject.</a:documentation>
      <a:documentation> Each &lt;subject&gt; is interpreted as a single entity, with all textual references encoded by the element treated as a single, grouped passage.</a:documentation>
      <optional>
        <ref name="ed-stamp"/>
      </optional>
      <choice>
        <ref name="nontextual-reference"/>
        <ref name="textual-reference"/>
      </choice>
    </element>
  </define>
  <define name="element-subject">
    <element name="subject">
      <a:documentation>points to text references that act as the subject of the claim.</a:documentation>
      <a:documentation>Unlike @subject, which points to any entity via idrefs, &lt;subject&gt; is intended exclusively to point to data content or a textual subject.</a:documentation>
      <a:documentation> Each &lt;subject&gt; is interpreted as a single entity, with all textual references encoded by the element treated as a single, grouped passage.</a:documentation>
      <optional>
        <ref name="ed-stamp"/>
      </optional>
      <choice>
        <ref name="nontextual-reference"/>
        <ref name="textual-reference"/>
      </choice>
    </element>
  </define>
  <define name="element-tok-for-claim-no-ref">
    <element name="tok">
      <a:documentation>points to one or more tokens in a source + ref defined by the parent.    </a:documentation>
      <ref name="tok-selector-attributes-many"/>
      <optional>
        <ref name="attr-chars"/>
      </optional>
    </element>
  </define>
  <define name="element-tok-for-claim-with-ref">
    <element name="tok">
      <a:documentation>points to one or more tokens in a source defined by the parent.    </a:documentation>
      <ref name="attr-ref-many"/>
      <ref name="tok-selector-attributes-many"/>
      <optional>
        <ref name="attr-chars"/>
      </optional>
    </element>
  </define>
  <define name="voc-element-tan-a">
    <interleave>
      <zeroOrMore>
        <ref name="voc-element-work"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-place"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-unit"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-div-type"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-mode"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-vers"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-scri"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-topic"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="voc-element-verb"/>
      </zeroOrMore>
    </interleave>
  </define>
  <define name="voc-element-mode">
    <element name="modal">
      <a:documentation>contains an IRI + name pattern identifying a modal or adverb that qualifies the verb of an assertion.</a:documentation>
      <a:documentation>See main.xml#vocabularies-modals for standard vocabulary.</a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <define name="voc-element-place">
    <element name="place">
      <a:documentation>contains an IRI + name pattern identifying a spatial location, usually somewhere on earth</a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <define name="voc-element-scri">
    <element name="scriptum">
      <a:documentation>contains an IRI + name pattern identifying a text-bearing object.</a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <define name="voc-element-topic">
    <element name="topic">
      <a:documentation>declares one or more topics, to be used in conjunction with @topic under &lt;align&gt; to associate alignments with specific topics instead of verbatim parallels.  </a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <define name="voc-element-unit">
    <element name="unit">
      <a:documentation>contains an IRI + name pattern identifying a unit type (e.g., millimeters, seconds, Euros), to be used in conjunction with &lt;object&gt; to specify the meaning of a value</a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <define name="voc-element-vers">
    <element name="version">
      <a:documentation>identifies the version of a work. Applicable to sources that contain multiple versions, e.g., original text and facing translations. Like &lt;work&gt;, &lt;version&gt; points to a conceptual entity, not a physical one.</a:documentation>
      <a:documentation>In the context of a class 1 file, the entity identified by &lt;version&gt; is assumed to be a version of the entity defined in &lt;work&gt;. In TAN-c files, however, no relationship is assumed between &lt;version&gt; and any putative work, unless explicitly stated in that file. </a:documentation>
      <a:documentation>Very few work-versions have their own URN names. It is advisable to assign a tag URN or a UUID. If you have used an IRI for &lt;work&gt; that you are entitled to modify, you may wish to add a suffix that will name the version. If you need to specify exactly where on a text-bearing object a version appears, &lt;desc&gt; or &lt;comment&gt; should be used.</a:documentation>
      <a:documentation>For more, see main.xml#conceptual_works</a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <define name="voc-element-work">
    <element name="work">
      <a:documentation>identifies a creative textual work, understood conceptually, not physically (e.g., Homer's Iliad, not a particular version or copy of it).</a:documentation>
      <a:documentation>The term "work" is only loosely defined in TAN. Any text that has enough unity to be referred to in ordinary conversation as a single entity may be identified as a work. A work may be composed of other works, be a part of other works, or even overlap with other works. E.g., the Lord's Prayer, the Gospel of Luke, the Tetravengelion, the New Testament, and the Bible are all valid works, despite the complex relationship between each of them.</a:documentation>
      <a:documentation>This element takes the IRI + name pattern. For more, see main.xml#conceptual_works</a:documentation>
      <ref name="entity-nondigital-id"/>
    </element>
  </define>
  <!-- PATTERNS -->
  <define name="in-lang">
    <choice>
      <ref name="attr-in-lang"/>
      <oneOrMore>
        <ref name="element-in-lang"/>
      </oneOrMore>
    </choice>
  </define>
  <define name="subject">
    <choice>
      <ref name="ptr-attr-subject"/>
      <oneOrMore>
        <ref name="element-subject"/>
      </oneOrMore>
    </choice>
  </define>
  <define name="object">
    <choice>
      <ref name="ptr-attr-object"/>
      <oneOrMore>
        <ref name="complex-object"/>
      </oneOrMore>
    </choice>
  </define>
  <define name="complex-object">
    <choice>
      <ref name="element-object"/>
      <oneOrMore>
        <ref name="element-claim"/>
      </oneOrMore>
    </choice>
  </define>
  <define name="nontextual-reference">
    <optional>
      <choice>
        <ref name="attr-lang-xml"/>
        <ref name="ptr-attr-units"/>
      </choice>
    </optional>
    <text/>
  </define>
  <define name="textual-reference">
    <choice>
      <ref name="multi-source-whole-div-textual-reference"/>
      <ref name="single-source-partial-div-textual-reference"/>
      <ref name="scriptum-reference"/>
    </choice>
  </define>
  <!-- If a textual reference points merely to <div>s then all one need is @src/@work plus @ref -->
  <define name="multi-source-whole-div-textual-reference">
    <choice>
      <ref name="ptr-attr-src-many"/>
      <ref name="ptr-attr-work"/>
    </choice>
    <ref name="attr-ref-many"/>
  </define>
  <!-- If a textual reference points to parts of divs, i.e., tokens and token-defined passages, then it is source-specific (@src not @work). -->
  <define name="single-source-partial-div-textual-reference">
    <ref name="ptr-attr-src-one"/>
    <choice>
      <ref name="single-div-partial-textual-reference"/>
      <ref name="multi-div-partial-textual-reference"/>
    </choice>
  </define>
  <!-- If a partial textual reference is a subset of a <div> then @ref, pointing to a single <div>, should be in the parent element -->
  <define name="single-div-partial-textual-reference">
    <ref name="attr-ref-one"/>
    <oneOrMore>
      <choice>
        <ref name="element-tok-for-claim-no-ref"/>
        <ref name="text-passage-selector-no-ref"/>
      </choice>
    </oneOrMore>
  </define>
  <!-- If a partial textual reference is a spans <div>s then @ref should be in the children elements -->
  <define name="multi-div-partial-textual-reference">
    <oneOrMore>
      <choice>
        <ref name="element-tok-for-claim-with-ref"/>
        <ref name="text-passage-selector-with-ref"/>
      </choice>
    </oneOrMore>
  </define>
  <define name="scriptum-reference">
    <choice>
      <ref name="ptr-attr-scriptum"/>
      <ref name="ptr-attr-which"/>
    </choice>
    <optional>
      <ref name="ptr-attr-work"/>
      <optional>
        <ref name="ptr-attr-version"/>
      </optional>
    </optional>
    <zeroOrMore>
      <ref name="element-div"/>
    </zeroOrMore>
  </define>
</grammar>
