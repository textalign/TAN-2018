default namespace = "tag:textalign.net,2015:ns"

start = element TAN-T { empty }
#   1A. ATTRIBUTES
attr-accessed-when =
    
    ## specifies when an electronic file was last examined
    attribute accessed-when { xsd:date | xsd:dateTime }
attr-cert =
    
    ## indicates how certain the claimant is of the claims, expressed as a real number from 0 (no certainty) to 1 (complete certainty).
    
    ## This attribute is taken into account before all other attributes except @claimant. That is, @cert is to be interpreted to mean: "@claimant has @cert confidence about the following assertion:...."
    
    ## @cert is cumulatively inheritable. Any @cert value should be multiplied against all ancestors' values of @cert. For example, in a TAN-A-tok file, if an <align> has a certainty of 0.6 and a child <tok> has a certainty of 0.3, then that <tok>'s calculated certainty is 0.18. See main.xml#inheritable_attributes
    
    ## Any claim inherits as its value of @cert the product of every component @cert. For example, if an <l> and an <m> in a TAN-A-lm file each have a certainty of 0.5, then the lexico-morphological claim that involves them both has a certainty of 0.25. 
    attribute cert { data-certainty }
attr-cert2 =
    
    ## provides a second measure of certainty. The value is taken along with @cert as being the low or high limit to the range of certainty. See documentation on @cert. 
    attribute cert2 { data-certainty }
attr-content-datatype =
    
    ## specifies a type of data. This attribute is used in TAN-A claims, and restricts the kind of object a particular verb governs to raw units, not entities definable by the IRI + name pattern. Use this attribute if and only if the verb may not govern objects defined as a vocabulary item.
    attribute content-datatype {
        "string"
        | "boolean"
        | "decimal"
        | "float"
        | "double"
        | "duration"
        | "dateTime"
        | "time"
        | "date"
        | "gYearMonth"
        | "gYear"
        | "gMonthDay"
        | "gDay"
        | "gMonth"
        | "hexBinary"
        | "base64Binary"
        | "anyURI"
        | "QName"
        | "normalizedString"
        | "token"
        | "language"
        | "NMTOKEN"
        | "NMTOKENS"
        | "Name"
        | "NCName"
        | "ID"
        | "IDREF"
        | "IDREFS"
        | "ENTITY"
        | "ENTITIES"
        | "integer"
        | "nonPositiveInteger"
        | "negativeInteger"
        | "long"
        | "int"
        | "short"
        | "byte"
        | "nonNegativeInteger"
        | "unsignedLong"
        | "unsignedInt"
        | "unsignedShort"
        | "unsignedByte"
        | "positiveInteger"
    }
attr-content-lexical-constraint =
    
    ## specifies a regular expression that constrains the value of any <object>. 
    
    ## Note that the regular expression will be strictly followed, e.g., "\d+" will be satisfied by "a1" (because there is at least one digit). If you wish to constrain the entire value, be sure to use ^ and $, e.g., "^\d+$". 
    attribute content-lexical-constraint { text }
attr-ed-when =
    
    ## marks the date or time when an element or its content was edited (added or modified)
    
    ## The value of must always conform to an ISO date or dateTime pattern. See main.xml#date_and_datetime.
    
    ## Along with @ed-who, this forms the Edit Stamp pattern. See main.xml#edit_stamp
    
    ## This attribute is weakly inheritable. See main.xml#inheritable_attributes
    attribute ed-when { xsd:dateTime | xsd:date }
attr-flags-for-errors =
    
    ## indicates the level of error to be attached to the enclosed message. This attribute is similar to Schematron's @role, but under a different name, to avoid confusion with TAN @roles.
    
    ## This attribute is non-inheritable.
    attribute flag { "warning" | "error" | "info" | "fatal" }
attr-flags-for-functions =
    
    ## specifies flags to be applied in an XPath function that uses regular expressions.
    
    ## s = dot-all mode; m = multi-line mode; i = case-insensitive mode; x = remove whitespace characters from regular expression; q = no metacharacters 
    
    ## For more see http://www.w3.org/TR/xpath-functions-30/#flags
    
    ## This attribute is non-inheritable.
    attribute flags {
        xsd:string { pattern = "[smixq]+" }
    }
attr-help =
    
    ## requests help on the context element. This attribute is equivalent to the help requested string, ???, but is useful in cases where the string cannot be placed (e.g., elements with no content or few attributes)
    attribute help { empty }
attr-href =
    
    ## points to the location of a file. In some contexts, this attribute is permitted only as a temporary measure, to assist editing via Schematron Quick Fixes.
    attribute href { text }
attr-id-alias =
    
    ## provides a unique identifier for an <alias>. Must be unique within a given file. Must consist only of non-spacing characters.
    attribute id {
        xsd:string { pattern = "\S+" }
    }
attr-id-tan =
    
    ## contains a tag URN that permanently and uniquely names the current file.
    
    ## For more on the syntax of tag URNs see main.xml#tag_urn
    attribute id { data-tag-uri }
attr-id-xml =
    
    ## identifies an entity described within an element. Must be unique within a given file. Must consist only of word characters.
    attribute xml:id { text }
attr-item-type =
    
    ## specifies what type of item a verb's object or subject must be. Expected values are names of elements allowed in any vocabulary.
    
    ## To bind the type to a textual reference in a class-1 source, let the value of @item-type be 'ref'; this anticipates a claim with object/subject element with @ref (and either @src or @work).
    attribute item-type { text }
attr-lang-xml =
    
    ## specifies a language code that names the language of the text enclosed by the parent element. Values are inherited by all descendants except for those that have an @xml:lang and their descendants.  
    
    ## Values should adhere to BCP (Best Common Practices) 47, http://www.rfc-editor.org/rfc/bcp/bcp47.txt. For more details see main.xml#language.
    
    ## Examples: 'eng' (English), 'grc' (classical Greek), 'lat' (Latin) 
    attribute xml:lang { xsd:language }
attr-n =
    
    ## names a <div> or <group>, or refers to a <div>'s @n. 
    
    ## @n may consist of one or more values, space delimited, which are to be treated as synonyms.
    
    ## Any itemized value of @n may be numerical on non-numerical. A numerical value follows one of the supported TAN numeration systems, with commas and hyphens to refer to build sequences or ranges. The order of numerical items in an @n are significant. For example n="6, 8" signifies that the text straddles reference 6 then 8. But n="8, 6" signifies the converse. In the context of a <div>, the implication is that in neither case can the text be securely disentangled so as to create one <div> for 6 and another for 8.
    
    ## The hyphen-minus, - (U+002D, the most common form of hyphen), is reserved to specify a range. This feature is useful for cases where a <div> straddles more than one standard reference number (e.g., a translation of Aristotle that cannot be easily tied to Bekker numbers). 
    
    ## If you need to use a hyphen-like character in an @n that does not specify a range, consider ‐ (U+2010 HYPHEN), ‑ (U+2011 NON-BREAKING HYPHEN), ‒ (U+2012 FIGURE DASH), – (U+2013 EN DASH), or − (U+2212 MINUS SIGN).
    
    ## The comma is reserved to specify a sequence of references. 
    
    ## The space is reserved to separate synonymous values, or to pad commas and hyphens. If you wish to use a value of @n that should not be split at the space, use the underbar, _, instead. 
    
    ## @n does not permit non-word characters, e.g., the period/full stop or colon. Such non-word characters need to be used by @ref to connect @n's.
    
    ## Because @n is used to construct @ref, it is indirectly cumulatively inheritable. See main.xml#inheritable_attributes.
    
    ## Extra TAN vocabulary is available for @n, to provide built-in aliases. For more on this feature see main.xml#extra_n_vocabulary. For specific extra vocabulary see main.xml#vocabularies-n-bible-eng main.xml#vocabularies-n-bible-spa main.xml#vocabularies-n-quran-eng-ara main.xml#vocabularies-n-unlabeled-divs-1-eng
    attribute n {
        xsd:string { pattern = "[\w_]+([\- ,]+[\w_]+)*" }
    }
attr-pattern =
    
    ## specifies a regular expression pattern to be searched for or matched. TAN regular expressions support the special escape character \u{}. 
    
    ## For more see main.xml#regular_expressions and https://www.w3.org/TR/xpath-functions-30/#regex-syntax
    attribute pattern { text }
attr-status =
    
    ## specifies whether an element is required by in any <claim> that uses the <verb> in question.
    attribute status { "required" | "allowed" | "disallowed" }
attr-TAN-ver =
    
    ## specifies a version of TAN. 
    attribute TAN-version { text }
attr-when =
    
    ## indicates a date or date and time
    
    ## This attribute is weakly inheritable. See main.xml#inheritable_attributes
    attribute when { xsd:dateTime | xsd:date }
# Pointing attributes take idrefs pointing to other nodes
ptr-attr-div-type =
    
    ## is used by class-2 files to point to one or more <div-type>s in class-1 files or by class-1 files to point to div type vocabulary items. Permits multiple values separated by spaces.
    attribute div-type { text }
ptr-attr-ed-who =
    
    ## refers to one or more <agent>s who have edited (added or modified) an element or its content.
    
    ## Along with @ed-when, this forms the Edit Stamp pattern. See main.xml#edit_stamp
    
    ## This attribute is weakly inheritable. See main.xml#inheritable_attributes
    attribute ed-who { text }
ptr-attr-group =
    
    ## identifies one or more <group-type>s under which the parent element, and its children, should be grouped.
    
    ## This attribute is cumulatively inheritable. An <item> is to be associated by all values of @group in itself and its ancestors.
    attribute group { text }
ptr-attr-idrefs =
    
    ## contains references to one or more values of @xml:id or @id in the file 
    attribute idrefs { text }
ptr-attr-include =
    
    ## signals that the parent element is to be replaced by all elements of the same name found in the referred <inclusion>.
    
    ## A slight exception is made in the case of <div include=""/>, where only the rootmost <div>s are included (which come with all descendant <div>s preserved intact).
    attribute include { text }
ptr-attr-licensor =
    
    ## specifies one or more persons or organizations who hold the rights over the material specified by the parent element (either the data of the current file, or of the source that forms the basis for the data).
    
    ## For more, see main.xml#key_declarations
    attribute licensor { text }
ptr-attr-period =
    
    ## names via idrefs one or more <period>s.
    attribute period { text }
ptr-attr-relationship =
    
    ## names via idrefs one or more <relationship>s
    attribute relationship { text }
ptr-attr-role =
    
    ## refers via idrefs one or more <role>s
    attribute roles { text }
ptr-attr-type =
    
    ## indicates the type of its parent element. In the context of <div> it specifies a type of textual unit, identified by a <div-type>. In the context of <group> it specifies a kind of group identified by a <group-type>. In the context of <category> it specifies a kind of grammatical feature identified by <feature>.
    attribute type { text }
ptr-attr-which =
    
    ## points to a single vocabulary item. Reference is made either via idref or <name>. Because this attribute points to only one vocabulary item, spaces are permitted, if using a vocabulary's <name>. Before evaluation @which will be name-normalized: spaces, hyphens, and underscores will be treated as identical, and text will be rendered lowercase. 
    attribute which { text }
ptr-attr-who =
    
    ## refers via idrefs to a person, organization, or algorithm.
    attribute who { text }
# 1B. DATA PATTERNS
data-certainty = xsd:double { pattern = "1|0|(0\.\d*[1-9])" }

## String for a @ref that specifies a single <div>.
data-div-item-ref = xsd:string { pattern = "([\w_]+([^\w\-][\w_]+)*)|.*\?\?\?.*" }

## String for a @ref that specifies a range of <div>s: one or more data-div-item-ref patterns separated by a hyphen or a comma.
data-div-range-ref =
    xsd:string {
        pattern =
            "([\w_]+([^\w\-][\w_]+)*)(((\s*-\s*)|(\s*,\s+))([\w_]+([^\w\-][\w_]+)*))*|.*\?\?\?.*"
    }

## Any generic IRI identifier.
data-IRI = xsd:anyURI { pattern = "[a-zA-Z][\-.+a-zA-Z0-9]+:\S+" }

## String that specifies a single item from a sequence: digits or "last(-digit)?" Similar to ~data-picker-sequence.
data-picker-item = xsd:string { pattern = "((last|max)|((last|max)-\d+)|(\d+))|.*\?\?\?.*" }

## String that specifies a range of items in a sequence: digits or "last(-digit)?" joined by hyphens (ranges) or commas. Similar to ~data-picker-item.
data-picker-sequence =
    xsd:string {
        pattern =
            "((last|max|all|\*)|((last|max)-\d+)|(\d+))(\s*-\s*(((last|max))|((last|max)-\d+)|(\d+)))?(\s*[, ]\s*(((last|max))|((last|max)-\d+)|(\d+))(\s+-\s+(((last|max))|((last|max)-\d+)|(\d+)))?)*|.*\?\?\?.*"
    }

## Tag URN, mandatory pattern for the IRI name of every TAN file 
data-tag-uri =
    xsd:anyURI {
        pattern =
            "tag:([\-a-zA-Z0-9._%+]+@)?[\-a-zA-Z0-9.]+\.[A-Za-z]{2,4},\d{4}(-(0\d|1[0-2]))?(-([0-2]\d|3[01]))?:\S+"
    }
# 
# 1C. ELEMENTS
element-adjustments =
    
    ## declares alterations. In a class-1 file, it specifies alterations that have been made to the underlying source. In a class-2 file, it specifies alterations that should be made to the class-1 source(s) before processing any claims in the <body>.
    
    ## The sequence of consecutive adjustments matters, in that their contents will be processed first by priority (<skip>, <rename>, <equate>, <reassign>), then in document order. The instructions in one <adjustment> may render null an instruction in a lower-priority, or subsequent adjustment action.
    element adjustments {
        ed-stamp?,
        (inclusion
         | (adjust-condition,
            (element-comment* & (adjust-core, adjust-non-core))))
    }
element-at-ref-constraint =
    
    ## specifies whether a verb uses <at-ref> (default: disallowed).
    element at-ref { ed-stamp?, attr-status }
element-body =
    
    ## contains the data of a TAN file.
    element body {
        ed-stamp?, body-attributes-non-core, (body-content-core & body-content-non-core)
    }
element-checksum =
    
    ## specifies some checksum value of a digital file. This element contains other elements that define the type and value of the checksum. Must begin with an IRI + name pattern that identifies the type of checksum being used (e.g., SHA-1).
    
    ## This element allows other users to check to see if copies of a file are identical. 
    
    ## No checksums will be generated, checked, or validated by TAN schemas.
    element checksum {
        entity-nondigital-content,
        
        ## states the value of a <checksum>
        element value { string }
    }
element-change =
    
    ## declares a change made to the current file. Must credit/blame someone, specified by @who, and indicate when the change was made, specified by @when.
    
    ## Collectively, <change> elements are called the changelog, the revision history of the document. 
    
    ## The editor has discretion as to how long or detailed a <change> should be, or how many should be retained in a changelog. Ideally, <change>s documenting every published version should be retained.
    
    ## <change> elements may appear in any order, but it is good practice to put the most recent at the top.
    element change { ed-stamp?, attr-when, attr-flags-for-errors?, ptr-attr-who, text }+
element-comment =
    
    ## discusses issues relevant to nearby data. Must credit someone, specified by @who, and indicate when the comment was made, specified by @when.
    element comment { attr-when, ptr-attr-who, text }
element-desc =
    
    ## provides a human-readable description of a concept, person, or thing referred to by the parent element (or the current document, if the parent element is <head>). <desc> is, in effect, a <comment> about that concept, person, or thing.
    element desc { metadata-human-readable-attributes, text }
element-file-resp =
    
    ## specifies the persons, organizations, or algorithms that are primarily responsible for the file. Any unattributed claims or assertions made in the file will be credited to/blamed upon these agents. At least one of these agents must be given an IRI in the namespace of the file @id. 
    element file-resp { ed-stamp?, (inclusion | ptr-attr-who) }
element-for-lang =
    
    ## specifies a language that is being discussed. This element does not identify the language of the text enclosed by the parent element (one must use @xml:lang for that purpose).
    
    ## Values should adhere to BCP (Best Common Practices) 47, http://www.rfc-editor.org/rfc/bcp/bcp47.txt. For more details see main.xml#language.
    
    ## Examples: 'eng' (English), 'grc' (classical Greek), 'lat' (Latin). For more see main.xml#language
    
    ## The sequence of consecutive <for-lang>s is immaterial.
    element for-lang { xsd:language }
element-group =
    
    ## collects items that share a common property, defined by the <group-type> to which it refers.
    element group {
        ed-stamp?,
        (inclusion
         | (group-attributes,
            (element-comment* & (body-group | body-item)+)))
    }
element-head =
    
    ## contains the metadata (data about the data in the <body>)
    
    ## For more see main.xml#metadata_head
    element head {
        ed-stamp?,
        (element-comment*
         & (entity-digital-tan-self-content,
            declaration-list,
            networked-files,
            adjustment-list,
            vocabulary-list,
            resp-list,
            element-change+,
            element-to-do))
    }
element-in-lang-constraint =
    
    ## specifies whether a verb uses <in-lang> (default: disallowed).
    element in-lang { ed-stamp?, attr-status }
element-IRI =
    
    ## contains an International Resource Identifier that names the concept, person, or thing referred to by the parent element. 
    
    ## Any kind of IRIs are allowed: URLs, tag URNs, UUIDs, etc. For names of well-known resources, an HTTP URL identifier might be preferred, to facilitate linked data. If an entity/resource lacks a suitable URL-type name, you may use or coin any other valid IRI, such as a UUID, a tag URN, or an OID. Some concepts may be difficult to find IRIs for.
    
    ## Sibling <IRI>s are to be treated as names for the same thing, not as names of different things. Loosely, sibling <IRI>s can be thought of as synonymous, but technically the are only poecilonymic. In the terms of Web Ontology Language (http://www.w3.org/TR/owl-ref/), sibling <IRI>s cannot be assumed to share the relationship owl:sameAs, because they will draw from independent vocabularies that may identify similar concepts differently. 
    
    ## An element given multiple <IRI>s refers to one or more items within the intersection, not the union, of the target concepts. Nevertheless, most interpretations of TAN files will draw inferences based upon the union. That is, if item A is assigned IRI X, item B IRIs X and Y, and item C IRI Y, it is likely that users of the data will infer identity between items A and C. 
    
    ## The sequence of consecutive <IRI>s is immaterial.
    
    ## The element is named IRI instead of URI to encourage internationalization, and the use of alphabets other than Latin. 
    
    ## An <IRI> from the standard TAN vocabulary may be overridden locally.
    
    ## For more see main.xml#IRIs_and_linked_data.
    element IRI { ed-stamp?, data-IRI }
element-license =
    
    ## states the license under which the data is distributed and the rights associated with it, exclusive of any rights attached to the source.
    
    ## Diligently check to ensure that the license you have claimed respects the rights of your sources' rightsholders. It is recommended that you license your data under a license that is similar to or more liberal than the one under which your sources have been released.
    
    ## For more discussion, see main.xml#key_declarations and for a list of standard TAN vocabulary, main.xml#vocabularies-licenses
    element license {
        ed-stamp?,
        (inclusion
         | (ptr-attr-licensor, (element-comment* & entity-nondigital-content)))
    }
element-location =
    
    ## declares where an electronic file was found and when. 
    
    ## The URL may be absolute or relative to the current document. 
    
    ## The sequence of consecutive <location>s is important. During TAN validation, the first <location> with an available document will be used, and the following sibling <location>s will be ignored.
    element location { ed-stamp?, attr-accessed-when, attr-href }
element-master-location =
    
    ## points to a location where a master copy of the file is to be found. Use of this element entails a commitment to updating the TAN file in that location.
    
    ## The URL may be absolute or relative to the current document. 
    
    ## <master-location> does not disallow the file from being kept, published, or distributed elsewhere. It merely indicates where an authoritative version of the file is to be found. 
    element master-location { ed-stamp?, attr-href }
element-name =
    
    ## provides a human-readable name of a concept, person, or thing referred to by the parent element (or the current document, if the parent element is <head>).
    
    ## A name must be unique within a file for a given class of items. That is, if "page" is the name of a div type, there must be no other div type vocabulary item with that name, but "page" could still be used as the <name> of a verb or person.  
    
    ## The sequence of consecutive <name>s is immaterial. Some applications may adopt the first <name> as the primary one.  
    element name { metadata-human-readable-attributes, text }
element-numerals =
    
    ## specifies how nonarabic numerals should be interpreted, as letter numerals or as Roman numerals.
    
    ## If <numerals> is not present, any ambiguous numerical values are assumed to be Roman.
    element numerals {
        
        ## specifies whether roman numerals should have interpretive priority over letter numerals. For example, should "c" be interpreted as 3 or 100? Default is roman.
        attribute priority { "letters" | "roman" }
    }
element-object-constraint =
    
    ## specifies expectations on a verb's use of object. By default, an object is required.
    element object { ed-stamp?, attr-status, (constraint-item-type | constraint-content)? }
element-period-constraint =
    
    ## as a constraint specifies expectations on a verb's use of period. By default, a period is optional.
    element period { ed-stamp?, attr-status }
element-place-constraint =
    
    ## specifies expectations on a verb's use of place. By default, an place is optional.
    element place { ed-stamp?, attr-status }
element-resp =
    
    ## specifies a role held by one or more persons, organizations, or algorithms, perhaps during a specified time period.
    
    ## The sequence of consecutive <resp>s is immaterial.
    element resp {
        ed-stamp?,
        (inclusion | (ptr-attr-who, ptr-attr-role, ptr-attr-period?))
    }
element-subject-constraint =
    
    ## specifies expectations on a verb's use of subject. By default, a subject is required.
    element subject { ed-stamp?, attr-status, (constraint-item-type | constraint-content)? }
element-tail =
    
    ## permits any arbitrary content. This element is suitable as a placeholder for temporary data, especially to improve the efficiency of applications. 
    element tail { any-content }
element-to-do =
    
    ## lists tasks that remain to be done (via <comment> children). Lack of content in <to-do> suggests that the file is no longer considered a work in progress, but it does not guarantee that the file will not be changed in the future.
    
    ## An empty <to-do> implies stability, so requires a file to have a <master-location>.
    element to-do { ed-stamp?, (inclusion | element-comment*) }
element-token-definition =
    
    ## defines a word token via a regular expression. The pattern in this element is used to split a string into tokens and non-tokens. 
    
    ## The attributes of this element mirror the parameters for the function xsl:analyze-string (see https://www.w3.org/TR/xslt-30/#element-analyze-string).
    
    ## For more see main.xml#defining_tokens and for standard TAN vocabulary items see  main.xml#vocabularies-token-definitions
    element token-definition {
        ed-stamp?,
        (inclusion
         | (token-definition-attributes,
            (ptr-attr-which | (attr-pattern, attr-flags-for-functions?))))
    }
element-vocabulary-key =
    
    ## contains vocabulary items for the immediate file.
    element vocabulary-key { ed-stamp?, (element-comment* & voc-key-core & voc-key-non-core) }
element-where =
    
    ## identifies a condition that permits the following adjustment actions to be performed.
    
    ## The condition must be true for each attribute, for at least one value in that attribute.
    
    ## The sequence of consecutive <where>s is immaterial, although they will be processed in document order. It is advisable to start with <where>s that are most easily processed.
    element where { ed-stamp?, action-condition-attributes }+
# Elements that link to other files
link-element-companion-version =
    
    ## identifies a file closely associated with the current one.
    
    ## In a class 1 file, <companion-version> points to another class 1 file that has a different version of the same work found in the same scriptum.
    
    ## In class 2 and class 3 files, <companion-version> points to a file of the same type, but the nature of the relationship between the two files is not stipulated. It can be used to point to a continuation of a dataset, or to competing one.
    
    ## The sequence of consecutive <companion-version>s is immaterial.
    element companion-version { entity-digital-tan-no-id }
link-element-inclusion =
    
    ## specifies a TAN file that is available for inclusion. An inclusion occurs whenever an element X points to this inclusion by means of @include. TAN-compliant validators and processors will find every element X that is found in the included file (checked recursively, against any inclusions of X adopted by the inclusion) and insert them at that place in the dependent document.
    
    ## Only select elements will be included, not the entire inclusion file. Exactly which elements are included is dictated by @include placed in select empty elements.
    
    ## The presence of an <inclusion> does not require its use, although it may add time to the validation process. 
    
    ## The sequence of consecutive <inclusion>s is immaterial.
    
    ## For more, see main.xml#inclusions-and-vocabularies
    element inclusion {
        ed-stamp?, attr-id-xml, (element-comment* & entity-digital-tan-other-content)
    }
link-element-predecessor =
    
    ## identifies a file that the current file succeeds. Predecessors may or may not have the same @id value.
    
    ## The sequence of consecutive <predecessor>s is immaterial.
    element predecessor { entity-digital-tan-no-id }
link-element-see-also =
    
    ## identifies a file that is related to the current one.
    
    ## The sequence of consecutive <see-also>s is immaterial.
    element see-also {
        ed-stamp?,
        (inclusion
         | (ptr-attr-relationship,
            (element-comment* & (entity-digital-core-content | entity-digital-tan-other-content))))
    }
link-element-source =
    
    ## identifies the source upon which the data in the <body> of the current file depends.
    
    ## TAN-T and TAN-A-lm allow only one <source>. TAN-A-tok allows exactly two. All other TAN formats require one or more. 
    
    ## The sequence of consecutive <source>s is immaterial, but it does dictate the order in which sources are validated and processed.
    element source { source-content }
link-element-successor =
    
    ## identifies a file that succeeds the current file. Successors may or may not have the same document @id value.
    
    ## The sequence of consecutive <successor>s is immaterial.
    element successor { entity-digital-tan-no-id }
link-element-vocabulary =
    
    ## specifies a TAN-voc file that supplies vocabulary items for the host file. For more discussion, see main.xml#TAN-voc
    
    ## The sequence of consecutive <vocabulary>s is immaterial.
    element vocabulary { entity-digital-tan-no-id }
# Vocabulary items: Elements that identify specific things via IRIs, names, and descriptions
voc-element-agent = voc-element-person | voc-element-org | voc-element-alg
voc-element-alias =
    
    ## assigns a single id (@xml:id or @id) to multiple idrefs. An <alias> effectively groups multiple vocabulary items together. @xml:id and @id are equivalent alternatives. The latter supports characters disallowed by the former (e.g., colons).   
    
    ## This feature is useful for creating groups of persons, works, scripta, etc., and referring to them. It is inspired by the model of the critical edition, where multiple manuscripts, each of which have their own identifier, can be assigned a family that has its own special siglum. 
    
    ## Because ids and idrefs are encapsulated within a single file, and because <alias> serves exclusively idrefs, this element may neither include nor be included.
    
    ## The sequence of consecutive <alias>es is immaterial.
    element alias {
        ed-stamp?,
        ((attr-id-xml | attr-id-alias), ptr-attr-idrefs)
    }
voc-element-alg =
    
    ## contains an IRI + name pattern identifying an algorithm.
    
    ## The term "algorithm" covers any set of computational instructions. It does not include the hardware used to run the algorithm, nor does it identify any algorithms used to run an algorithm. For example, an algorithm might identify one or more XSLT stylesheets, but it does not identify the engine (e.g., Saxon), catalyzing software (e.g., oXygen), or operating system (e.g., Windows) used to run the algorithm.  
    element algorithm { entity-digital-nontan-id }
voc-element-div-type =
    
    ## declares a type of textual division (e.g., title, paragraph, stanza). 
    
    ## For more information, see main.xml#reference_system and main.xml#vocabularies-div-types for standard TAN values. 
    element div-type { entity-nondigital-id }
voc-element-group-type =
    
    ## names types of <group>s. See main.xml#vocabularies-group-types for standard TAN values.
    element group-type { entity-nondigital-id }
voc-element-org =
    
    ## contains an IRI + name pattern identifying an organization: a group of persons, whether formally incorporated or not.
    
    ## This term is taken in its loosest sense. "Organization" and "person" are treated as mutually exclusive and exhaustive categories of all human beings, real or fictive. Therefore a tribe or clan, which ordinarily might dislike being thought of as an organization, are nevertheless so classified here.
    element organization { entity-nondigital-id }
voc-element-period =
    
    ## identifies or defines a period of time, either through specific dates or dateTimes, or to a vocabulary item that names a more generic period of time.
    element period {
        entity-nondigital-id |
        (ed-stamp?,
        (inclusion
         | (attr-id-xml,
            
            ## specifies the beginning of a period of time.
            attribute from { xsd:dateTime | xsd:date },
            
            ## specifies the end of a period of time.
            attribute to { xsd:dateTime | xsd:date })))
    }
voc-element-person =
    
    ## contains an IRI + name pattern identifying an individual human being.
    element person { entity-nondigital-id }
voc-element-relationship =
    
    ## specifies a relationship that one document has to another.
    element relationship { entity-nondigital-id }
voc-element-role =
    
    ## specifies a role (responsibility, task, or activity) that one or more <agent>s had in creating or editing the data.
    
    ## A role may be any activity, e.g., editor, funder, supervisor, data-processor, peer reviewer, patron, identified through the enclosed IRI + name pattern.
    
    ## See main.xml#vocabularies-roles for standard TAN vocabulary.
    element role { entity-nondigital-id }
voc-element-verb =
    
    ## contains an IRI + name pattern identifying a property, relationship, action, or something else that is used to say something about something. 
    
    ## The preferred term "verb" is equivalent to RDF "predicate." The latter term is avoided, since in regular usage "predicate" signifies both a verb and all the words it governs.
    
    ## See main.xml#vocabularies-verbs for standard TAN vocabulary items.
    element verb { extra-verb-attrs?, entity-nondigital-constrained }
# 
#   1D. PATTERNS
action-condition = action-simple-condition | action-complex-condition
action-simple-condition = action-condition-attributes
action-condition-attributes = empty
action-complex-condition = element-where
adjustment-list = element-adjustments*
adjust-condition = empty
adjust-core = empty
adjust-non-core = empty
# We omit @xml:id to avoid id conflicts
any-attribute = attribute * - xml:id { text }
any-content = any-element* & text
any-element = element * { any-attribute*, any-content }
body-attributes-non-core = empty
body-content-core = element-comment*
body-content-non-core = empty
body-group = element-group
# items are defined by the master schemas
body-item = empty
certainty-stamp = certainty-claim?, ed-stamp?
certainty-claim = attr-cert, attr-cert2?
constraint-content = attr-content-datatype, attr-content-lexical-constraint?
constraint-item-type = attr-item-type
constraints-on-verb =
    
    ## specifies the expectations for a given verb. Any verb without constraints is presumed to be transitive, requiring a subject and an object, allowing adverbs, but disallowing opt-in elements, e.g., <in-lang>.
    element constraints {
        ed-stamp?,
        (element-comment*
         & element-subject-constraint?
         & element-object-constraint?
         & element-at-ref-constraint?
         & element-in-lang-constraint?
         & element-period-constraint?
         & element-place-constraint?)
    }
declaration-list = declaration-core & declaration-non-core
declaration-core = element-license+ & element-numerals?
declaration-non-core = empty

## Editorial stamp: who created or edited the enclosed data and when. 
ed-stamp = ptr-attr-ed-who, attr-ed-when
entity-digital-nontan-id =
    ed-stamp?,
    (inclusion
     | (attr-id-xml, (element-comment* & entity-digital-core-content)))
entity-digital-nontan-no-id =
    ed-stamp?,
    (inclusion | (element-comment* & entity-digital-core-content))
entity-digital-tan-id =
    ed-stamp?,
    (inclusion
     | (attr-id-xml, (element-comment* & entity-digital-tan-other-content)))
entity-digital-core-content =
    (element-IRI+, metadata-human-readable, element-checksum*, element-location+)
    | (ptr-attr-which & attr-accessed-when)
entity-digital-tan-no-id =
    ed-stamp?,
    (inclusion | (element-comment* & entity-digital-tan-other-content))
# attr-href is turned on for TAN files, to allow SQFs to be applied to the element, to autocomplete IRI, name, and location
entity-digital-tan-other-content = attr-href | entity-digital-core-content
entity-digital-tan-self-content = metadata-human-readable, element-master-location*
# named patterns that are constrained (verbs)
entity-nondigital-constrained =
    ed-stamp?,
    (inclusion
     | (attr-id-xml?, (element-comment* & entity-nondigital-with-constraints-content)))
entity-nondigital-content = (element-IRI+, metadata-human-readable) | ptr-attr-which
# named patterns that MUST take an id
entity-nondigital-id =
    ed-stamp?,
    (inclusion
     | (attr-id-xml, (element-comment* & entity-nondigital-content)))
# named patterns that MAY NOT take an id
entity-nondigital-no-id =
    ed-stamp?,
    (inclusion | (element-comment* & entity-nondigital-content))
entity-nondigital-with-constraints-content =
    (element-IRI+, metadata-human-readable, constraints-on-verb?) | ptr-attr-which
entity-tok-def = element-token-definition, metadata-human-readable
extra-verb-attrs = empty
group-attributes = group-attributes-core, group-attributes-non-core
group-attributes-core = ptr-attr-type?, attr-n?
group-attributes-non-core = empty
inclusion = ptr-attr-include, attr-help?
metadata-human-readable = element-name+, element-desc*
metadata-human-readable-attributes = ed-stamp?, attr-lang-xml?
networked-files = networked-files-core & networked-files-non-core
networked-files-core =
    link-element-inclusion*
    & link-element-vocabulary*
    & source-list
    & link-element-see-also*
    & link-element-predecessor*
    & link-element-successor*
    & link-element-companion-version*
networked-files-non-core = empty
resp-list = element-resp+ & element-file-resp
source-content = empty
source-list = link-element-source
TAN-root = attr-id-tan, attr-TAN-ver, ed-stamp?, element-head, element-body, element-tail?
token-definition-attributes = empty
vocabulary-list = link-element-vocabulary*, element-vocabulary-key
voc-key-core =
    voc-element-agent*
    & voc-element-role*
    & voc-element-period*
    & voc-element-alias*
    & voc-element-relationship*
voc-key-non-core = empty
